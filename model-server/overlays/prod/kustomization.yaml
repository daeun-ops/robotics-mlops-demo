name: ci-cd

on:
  push:
    branches: [ "main" ]
    paths:
      - "model-server/**"
      - ".github/workflows/ci-cd.yaml"
      - "mlflow/**"
      - "airflow/**"
  pull_request:
    branches: [ "main" ]

env:
  # ─────────────────────────────────────────────────────────────
  # 공통 환경변수 / 필요시 수정하면됨
  # ─────────────────────────────────────────────────────────────
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/robotics-model     # ghcr.io/<owner>/<repo>/robotics-model
  # 배포 네임스페이스(OKD/K8s)
  K8S_NAMESPACE: "?"                                      # 예: "ml-platform" (Secrets에서 KUBE_NAMESPACE로도 주입 가능)
  DEPLOYMENT_NAME: "robotics-model"                       # model-server/deployment.yaml 의 name과 일치
  KUSTOMIZE_DIR: "model-server"                           # kustomization.yaml 위치

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      # 1 checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2 python dependancy 설치 / 간단 smoke teest
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install server deps
        working-directory: model-server/app
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -c "import fastapi, uvicorn; print('FastAPI/uvicorn import OK')"

      # 3 Docker(buildd X) 설정 (캐시/멀티플랫폼 등 확장 쉬울라고)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4 registry login (GHCR) 
      #    ─ Secret 필요: GHCR_USERNAME="?" , GHCR_TOKEN="?"
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 5 image tag 계산 (SHA 기반)
      - name: Compute tags
        id: vars
        run: |
          SHA_SHORT="${GITHUB_SHA::7}"
          echo "sha_tag=${SHA_SHORT}" >> $GITHUB_OUTPUT
          echo "img=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHA_SHORT}" >> $GITHUB_OUTPUT
          echo "img_latest=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

      # 6) Docker image build / pusjh
      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: ./model-server
          file: ./model-server/Dockerfile
          push: true
          tags: |
            ${{ steps.vars.outputs.img }}
            ${{ steps.vars.outputs.img_latest }}

  deploy:
    name: Deploy to K8s/OKD
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1. kubectl 설치
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.30.0"

      # 2. kubeconfig 설정
      #    ─ Secret 필요함
      #      KUBE_CONFIG_B64="?"  (base64 인코딩된 kubeconfig)
      - name: Write kubeconfig
        run: |
          echo "${KUBE_CONFIG_B64}" | base64 -d > kubeconfig
        env:
          KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG_B64 }}

      - name: Use kubeconfig
        run: |
          export KUBECONFIG=$PWD/kubeconfig
          kubectl cluster-info

      # 3. kustomize 설치 (image tag 바꾸는거 편할라고)
      - name: Setup kustomize
        run: |
          curl -sSL "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/kustomize
          kustomize version

      # 4. image tag 바꾸고 apply
      - name: Kustomize build & apply
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
          IMG_SHA: ${{ needs.build-and-test.outputs.img || '' }}
        run: |
          # Image tag build-and-test에서 계산한 SHA를 재구성한 다음 사용ㅌ
          SHA_SHORT="${GITHUB_SHA::7}"
          IMG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHA_SHORT}"

          echo "Using image: ${IMG}"
          cd "${{ env.KUSTOMIZE_DIR }}"
          kustomize edit set image robotics-model=${IMG}   # kustomization.yaml 의 name: robotics-model 과 일치
          kustomize build . | kubectl -n "${{ env.K8S_NAMESPACE }}" apply -f -

      # 5. Rollout 확인
      - name: Wait for rollout
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig
        run: |
          kubectl -n "${{ env.K8S_NAMESPACE }}" rollout status deploy/${{ env.DEPLOYMENT_NAME }} --timeout=120s
